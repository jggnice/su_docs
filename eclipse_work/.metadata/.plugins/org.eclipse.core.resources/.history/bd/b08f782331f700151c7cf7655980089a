#include "route.h"
#include "lib/lib_record.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

//common variables
int tepresult[600] =
{ 0 };
int num_of_demand = 0;
int num_of_points = 0;
int adjacent[600][8] =
{ 0 };
int adj_res[600][8] =
{ 0 };
int adjindex[600] =
{ 0 };
int checkdemand[600] =
{ 0 };
int demands[52];
int num_of_edge = 0;
int countall = 0;
int AA[52][52];
int AAA[52 * 52][60];
//common variables ends
void search_route1(int (*topo_int)[4], int sour, int vim)
{
	//// local variables ////
	int notValid[600] =
	{ 0 };
	int minweight = 1000000;
	int edgeall[vim - 1];
	int edgemin[vim - 1];
	int result1[Pn];
	int i;
	int loc;
	int adjindex1[600] =
	{ 0 };
	//// local variables end ////
	for (i = 0; i < Pn; i++)
	{
		result1[i] = NOVALE;
	}
	result1[0] = demands[sour];
//	result1[vim - 1] = demands[1];
//	for (i = 0; i < 600; i++)
//	{
//			for (j = 0; j < 8; j++)
//			{
//				DEBUG("  %d",adjacent[i][j]);
//			}DEBUG("\n");
//	}
//////////////////////////////////////////////////////////
	loc = 1;
	while (1)
	{
		int notvalid = 0;
		if (result1[loc] == NOVALE)
		{
			//if loc has no candidates
			if (0 == adjindex[result1[loc - 1]])
			{
				//loc-1 not valid
				loc--;
				if (0 == loc)
					return;
				notvalid = 1;
				//loc-1 not valid
			}
			else
			{
				result1[loc] = adjacent[result1[loc - 1]][0];
				edgeall[loc - 1] = adj_res[result1[loc - 1]][0];
				adjindex1[result1[loc - 1]]++;
			}

		}
		if (!notvalid && !notValid[result1[loc]])
		{
			int win = checkdemand[result1[loc]];
			notValid[result1[loc]] = 1;
			if (loc == vim - 1)
			{
				notValid[result1[loc]] = 0;
				//here needs to prove the last point
				int adj = 1;
				//int adj = isAdjacent(result1[loc], result1[loc + 1]);

				if (win)
				{
					countall++;
					edgeall[loc] = adj - 1;
					DEBUG("\n");
					int weight = 0;
					for (i = 0; i < vim - 1; i++)
					{
						weight += topo_int[edgeall[i]][3];
						DEBUG("__%3d", result1[i]);
					}
					DEBUG("__%d -->|| %d", result1[vim - 1], weight);
					DEBUG("\n");
					/////////////////////////////////////
					if (AA[sour][win - 1] > weight)
					{
						AA[sour][win - 1] = weight;
						for (i = 0; i < vim - 1; i++)
						{
							AAA[sour * 52 + win - 1][i] = edgeall[i];
						}
						AAA[sour * 52 + win - 1][vim - 1] = -1;

					}
					/////////////////////////////////////
					if (weight < minweight)
					{
						minweight = weight;
						for (i = 0; i < vim - 1; i++)
						{
							edgemin[i] = edgeall[i];
						}
					}
					//////////////////////////////////////
					notvalid = 1;
				}
				else
				{
					notvalid = 1;
				}
			}
			else
			{
				if (win)
				{
					/////////////////////////////////////
					DEBUG("\n");
					int weight = 0;
					for (i = 0; i < loc; i++)
					{
						weight += topo_int[edgeall[i]][3];
						DEBUG("__%3d", result1[i]);
					}
					DEBUG("__%d -->|| %d", result1[loc], weight);
					DEBUG("\n");
					/////////////////////////////////////
					if (AA[sour][win - 1] > weight)
					{
						AA[sour][win - 1] = weight;
						for (i = 0; i < loc; i++)
						{
							AAA[sour * 52 + win - 1][i] = edgeall[i];
						}
						AAA[sour * 52 + win - 1][loc] = -1;
					}
					/////////////////////////////////////
					countall++;
					notvalid = 1;
					notValid[result1[loc]] = 0;
				}
				else
				{
					loc++;
					continue;
				}
			}

		}
		else
			notvalid = 1;
		///////////////////////////////
		if (1 == notvalid)
		{
			if (adjindex1[result1[loc - 1]] < adjindex[result1[loc - 1]])
			{
				result1[loc] = adjacent[result1[loc - 1]][adjindex1[result1[loc - 1]]];
				edgeall[loc - 1] = adj_res[result1[loc - 1]][adjindex1[result1[loc - 1]]];
				adjindex1[result1[loc - 1]]++;
				//end
			}
			else
			{
				while (adjindex1[result1[loc - 1]] == adjindex[result1[loc - 1]])
				{
					if (loc == 1)
					{
						DEBUG("\n-------Result-Listed-Below--------\n");
						if (minweight >= tepresult[0])
							return;
						for (i = 0; i < vim - 1; i++)
						{
							tepresult[i + 1] = edgemin[i];
							DEBUG("__%d", edgemin[i]);
						}
						tepresult[0] = minweight;
						tepresult[vim] = -1;
						DEBUG("||--> %d", minweight);
						DEBUG("\n");

						return;
					}
					result1[loc] = NOVALE;
					adjindex1[result1[loc - 1]] = 0;

					loc--;
					notValid[result1[loc]] = 0;

				}
				result1[loc] = adjacent[result1[loc - 1]][adjindex1[result1[loc - 1]]];
				edgeall[loc - 1] = adj_res[result1[loc - 1]][adjindex1[result1[loc - 1]]];
				adjindex1[result1[loc - 1]]++;
				//end
			}
		} //not valid
	} //while
}
void search_route(char *topo[En], int edge_num, char *demand)
{
	int i, j;
//////////////// common settings begin //////////////////
	char delim[3] = ",|";
	char *p;
	j = 0;
	demands[j++] = atoi(strtok(demand, delim));
	while ((p = strtok(NULL, delim)))
		demands[j++] = atoi(p);
	num_of_demand = j;
	for (i = 0; i < num_of_demand; i++)
	{
		checkdemand[demands[i]] = 1 + i;
	}
	num_of_edge = edge_num;
	for (i = 0; i < 600; i++)
		for (j = 0; j < 8; j++)
		{
			adjacent[i][j] = Pn;
			adj_res[i][j] = En;
		}
	int topo_int[edge_num][4];
	for (i = 0; i < edge_num; i++)
	{
		int x, y;
		sscanf(topo[i], "%d,%d,%d,%d", &topo_int[i][0], &topo_int[i][1], &topo_int[i][2], &topo_int[i][3]);
		x = topo_int[i][1];
		if (num_of_points < x)
			num_of_points = x;
		y = topo_int[i][2];
		if (num_of_points < y)
			num_of_points = y;
		adjacent[x][adjindex[x]] = y;
		adj_res[x][adjindex[x]] = i;
		adjindex[topo_int[i][1]]++;
	}
	num_of_points++;

	tepresult[0] = 1000000;
	for (i = 1; i < 600; i++)
	{
		tepresult[i] = -1;
	}
	for (i = 0; i < 52; i++)
		for (j = 0; j < 52; j++)
		{
			AA[i][j] = 1000000;
		}
	for (i = 0; i < 52 * 52; i++)
	{
		AAA[i][0] = -1;
	}

//////////////// common settings end /////////////////
//////////////////////////////////////////////////////
//vim no less than 3;no more than points
	search_route1(topo_int, 0, 12);
	for (i = 2; i < num_of_demand; i++)
		search_route1(topo_int, i, 12);
//////////////////   The Ending   ////////////////////
//////////////////////////////////////////////////////
	AA[1][0] = 0;
	DEBUG("\n--num_of_points--->%d,%d\n", num_of_points, rand() % 100);
	DEBUG("\n--num_of_demand--->%d,%d\n", num_of_demand, rand() % 100);
	DEBUG("\n--countall = %d\n", countall);
	initGroup();
	int flag = evaluate();
	if (!flag)
		return;
	select();
	for (i = 0; i < 52; i++)
	{
		for (j = 0; j < 52; j++)
		{
			DEBUG("  %5d", AA[i][j]);
		}
		DEBUG("\n");
	}
	int tep = tepresult[0];
	if (tep >= 1000000)
	{
//		DEBUG("\n-----no valid solution-----\n");
		return;
	}
//	DEBUG("\n---- minimum weight is %d ----\n", tep);
//	for (i = 1; i < num_of_points; i++)
//	{
//		tep = tepresult[i];
//		if (tep < 0)
//			return;
//		record_result(tep);
//		DEBUG("-%d-", tep);
//	}

//////////////////   The Ending   ////////////////////
//////////////////////////////////////////////////////
}
// 初始化种群
int oldPopulation[SCALE][52];
void initGroup()
{
	int i, k;
	// Random random = new Random(System.currentTimeMillis());
	for (k = 0; k < SCALE; k++)
	{
		for (i = 0; i < num_of_demand; i++)
		{
			oldPopulation[k][i] = i;
		}
	}
	for (k = 0; k < SCALE; k++)
	{
		for (i = 0; i < num_of_demand; i++)
		{
			int r = rand() % num_of_demand;
			int tep = oldPopulation[k][i];
			oldPopulation[k][i] = oldPopulation[k][r];
			oldPopulation[k][r] = tep;
		}
	}
}
int DIS[SCALE];
int GOOD;
int evaluate()
{
	int flag = 0;
	int k, i;
	int min = 1000000;
	GOOD = 0;
	for (k = 0; k < SCALE; k++)
	{
		DIS[k] = 0;
		for (i = 0; i < num_of_demand - 1; i++)
		{
			int a = AA[oldPopulation[k][i]][oldPopulation[k][i + 1]];
			DIS[k] += a;
		}
		DIS[k] += AA[oldPopulation[k][num_of_demand - 1]][oldPopulation[k][0]];
		//round trip
		if (min > DIS[k])
		{
			flag = 1;
			min = DIS[k];
			GOOD = k;

			DEBUG("\n_____%8d____\n", min);
		}
	}
	for (i = 0; i < num_of_demand; i++)
	{
		DEBUG("__%2d", oldPopulation[GOOD][i]);
	}
	DEBUG("\n");
	return flag;
}
void select()
{
	int i, j, k;
	for (i = 0; i < num_of_demand; i++)
	{
		if (!oldPopulation[GOOD][i])
		{
			break;
		}
	}
	DEBUG("start at %2d\n", i);
	for (j = 0; j < num_of_demand - 1; j++)
	{
		int a = oldPopulation[GOOD][i] * 52 + oldPopulation[GOOD][(i + 1) % num_of_demand];
		DEBUG("(%2d,%2d)\n", oldPopulation[GOOD][i], oldPopulation[GOOD][(i + 1) % num_of_demand]);
		for (k = 0; k < 60; k++)
		{
			int tep = AAA[a][k];
			if (tep < 0)
				break;
			record_result(tep);
		}
		i = (i + 1) % num_of_demand;
	}
}
